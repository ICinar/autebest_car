<#@ template language="C#" hostSpecific="true" debug="true" inherits="ECCG.Data.Base" #>
<#@ ECCG Processor="ECCGDirectiveProcessor" #>
/*
 * address_defines.h -- AUTOGENERATED -- DO NOT EDIT --
 */

#ifndef __ADDRESS_DEFINES_H__
#define __ADDRESS_DEFINES_H__

/*
	defines for partitions
*/
<#
	foreach (XPathNavigator part in config.Select("/system/partition"))
	{
		string part_name = part.GetAttribute("name", "");
		List<XPathNavigator> reloc_list = config.Select("/reloc/partition[@name=\""+part_name+"\"]");
		if(reloc_list.Count!=0){
			XPathNavigator reloc_partition = reloc_list[0];
#>
/* partition '<#=part_name#>' */
#define OS_PART_<#=part_name#>_USR_SCHED <#=reloc_partition.SelectSingleNode("user_sched_state").Value#>
#define OS_PART_<#=part_name#>_USR_ERROR <#=reloc_partition.SelectSingleNode("user_error_state").Value#>
#define OS_PART_<#=part_name#>_USR_EXCEPTION <#=reloc_partition.SelectSingleNode("user_exception_state").Value#>
#define OS_PART_<#=part_name#>_SDA1_BASE <#=reloc_partition.SelectSingleNode("sda1_base").Value#>
#define OS_PART_<#=part_name#>_SDA2_BASE <#=reloc_partition.SelectSingleNode("sda2_base").Value#>
<#
			for (int i = 0; i < 4; i++) {
#>
#define OS_PART_<#=part_name#>_RANGE_<#=i#>_START <#=reloc_partition.SelectSingleNode("range_"+i+"_start").Value#>
#define OS_PART_<#=part_name#>_RANGE_<#=i#>_END   <#=reloc_partition.SelectSingleNode("range_"+i+"_end").Value#>
<#
			}
#>

<#
		}
		else
		{
#>
/* partition dummy '<#=part_name#>' */
#define OS_PART_<#=part_name#>_USR_SCHED 0x00000000
#define OS_PART_<#=part_name#>_USR_ERROR 0x00000000
#define OS_PART_<#=part_name#>_USR_EXCEPTION 0x00000000
#define OS_PART_<#=part_name#>_SDA1_BASE 0x00000000
#define OS_PART_<#=part_name#>_SDA2_BASE 0x00000000
<#
			for (int i = 0; i < 4; i++) {
#>
#define OS_PART_<#=part_name#>_RANGE_<#=i#>_START 0x00000000
#define OS_PART_<#=part_name#>_RANGE_<#=i#>_END 0x00000000
<#
			}
#>

<#
		}
	}
#>


/*
	defines for tasks
*/
<#
	foreach (XPathNavigator part in config.Select("/system/partition"))
	{
		string part_name = part.GetAttribute("name", "");
		foreach (XPathNavigator task in part.Select("task"))
		{
			string task_name = task.GetAttribute("name", "");
			List<XPathNavigator> reloc_list = config.Select("/reloc/task[@name=\""+task_name+"\" and @part=\""+part_name+"\"]");
			if(reloc_list.Count!=0){
				XPathNavigator reloc_task = reloc_list[0];
#>
/* task '<#=task_name#>' of partiton '<#=part_name#>' */
#define OS_TASK_<#=part_name#>_<#=task_name#>_ENTRY <#=reloc_task.SelectSingleNode("entry").Value#>
#define OS_TASK_<#=part_name#>_<#=task_name#>_STACK <#=reloc_task.SelectSingleNode("stack").Value#>
#define OS_TASK_<#=part_name#>_<#=task_name#>_ARG0 <#=reloc_task.SelectSingleNode("arg0").Value#>
<#
			}
			else
			{
#>
/* task dummy '<#=task_name#>' of partiton '<#=part_name#>' */
#define OS_TASK_<#=part_name#>_<#=task_name#>_ENTRY 0x00000000
#define OS_TASK_<#=part_name#>_<#=task_name#>_STACK 0x00000000
#define OS_TASK_<#=part_name#>_<#=task_name#>_ARG0 0x00000000
<#
			}
		}
	}
#>

/*
	defines for hooks
*/
<#
	foreach (XPathNavigator part in config.Select("/system/partition"))
	{
		string part_name = part.GetAttribute("name", "");
		foreach (XPathNavigator hook in part.Select("hook"))
		{
			string hook_name = hook.GetAttribute("name", "");
			List<XPathNavigator> reloc_list = config.Select("/reloc/task[@name=\""+hook_name+"\" and @part=\""+part_name+"\"]");
			if(reloc_list.Count!=0){
				XPathNavigator reloc_task = reloc_list[0];
#>
/* hook '<#=hook_name#>' of partiton '<#=part_name#>' */
#define OS_TASK_<#=part_name#>_<#=hook_name#>_ENTRY <#=reloc_task.SelectSingleNode("entry").Value#>
#define OS_TASK_<#=part_name#>_<#=hook_name#>_STACK <#=reloc_task.SelectSingleNode("stack").Value#>
#define OS_TASK_<#=part_name#>_<#=hook_name#>_ARG0 <#=reloc_task.SelectSingleNode("arg0").Value#>
<#
			}
			else
			{
#>
/* hook dummy '<#=hook_name#>' of partiton '<#=part_name#>' */
#define OS_TASK_<#=part_name#>_<#=hook_name#>_ENTRY 0x00000000
#define OS_TASK_<#=part_name#>_<#=hook_name#>_STACK 0x00000000
#define OS_TASK_<#=part_name#>_<#=hook_name#>_ARG0 0x00000000
<#
			}
		}
	}
#>

/*
	defines for invokables
*/
<#
	foreach (XPathNavigator part in config.Select("/system/partition"))
	{
		string part_name = part.GetAttribute("name", "");
		foreach (XPathNavigator invokable in part.Select("invokable"))
		{
			string invokable_name = invokable.GetAttribute("name", "");
			List<XPathNavigator> reloc_list = config.Select("/reloc/task[@name=\""+invokable_name+"\" and @part=\""+part_name+"\"]");
			if(reloc_list.Count!=0){
				XPathNavigator reloc_task = reloc_list[0];
#>
/* invokable '<#=invokable_name#>' of partiton '<#=part_name#>' */
#define OS_TASK_<#=part_name#>_<#=invokable_name#>_ENTRY <#=reloc_task.SelectSingleNode("entry").Value#>
#define OS_TASK_<#=part_name#>_<#=invokable_name#>_STACK <#=reloc_task.SelectSingleNode("stack").Value#>
#define OS_TASK_<#=part_name#>_<#=invokable_name#>_ARG0 <#=reloc_task.SelectSingleNode("arg0").Value#>
<#
			}
			else
			{
#>
/* invokable dummy '<#=invokable_name#>' of partiton '<#=part_name#>' */
#define OS_TASK_<#=part_name#>_<#=invokable_name#>_ENTRY 0x00000000
#define OS_TASK_<#=part_name#>_<#=invokable_name#>_STACK 0x00000000
#define OS_TASK_<#=part_name#>_<#=invokable_name#>_ARG0 0x00000000
<#
			}
		}
	}
#>

/*
	defines for ISRs
*/
<#
	foreach (XPathNavigator part in config.Select("/system/partition"))
	{
		string part_name = part.GetAttribute("name", "");
		foreach (XPathNavigator isr in part.Select("isr"))
		{
			string isr_name = isr.GetAttribute("name", "");
			List<XPathNavigator> reloc_list = config.Select("/reloc/task[@name=\""+isr_name+"\" and @part=\""+part_name+"\"]");
			if(reloc_list.Count!=0){
				XPathNavigator reloc_task = reloc_list[0];
#>
/* isr '<#=isr_name#>' of partiton '<#=part_name#>' */
#define OS_TASK_<#=part_name#>_<#=isr_name#>_ENTRY <#=reloc_task.SelectSingleNode("entry").Value#>
#define OS_TASK_<#=part_name#>_<#=isr_name#>_STACK <#=reloc_task.SelectSingleNode("stack").Value#>
#define OS_TASK_<#=part_name#>_<#=isr_name#>_ARG0 <#=reloc_task.SelectSingleNode("arg0").Value#>
<#
			}
			else
			{
#>
/* isr dummy '<#=isr_name#>' of partiton '<#=part_name#>' */
#define OS_TASK_<#=part_name#>_<#=isr_name#>_ENTRY 0x00000000
#define OS_TASK_<#=part_name#>_<#=isr_name#>_STACK 0x00000000
#define OS_TASK_<#=part_name#>_<#=isr_name#>_ARG0 0x00000000
<#
			}
		}
	}
#>

/*
	defines for kldds
*/
<#
	foreach (XPathNavigator part in config.Select("/system/partition"))
	{
		string part_name = part.GetAttribute("name", "");
		foreach (XPathNavigator kldd in part.Select("./kldd"))
		{
			string kldd_name = kldd.GetAttribute("entry", "");
			List<XPathNavigator> reloc_list = config.Select("/reloc/kldd[@entry=\""+kldd_name+"\" and @part=\""+part_name+"\"]");
			if(reloc_list.Count!=0){
				XPathNavigator reloc_kldd = reloc_list[0];
#>
/* kldd '<#=kldd_name#>' of partiton '<#=part_name#>' */
#define OS_KLDD_<#=part_name#>_<#=kldd_name#>_FUNC <#=reloc_kldd.SelectSingleNode("func").Value#>
#define OS_KLDD_<#=part_name#>_<#=kldd_name#>_ARG0 <#=reloc_kldd.SelectSingleNode("arg0").Value#>
<#
			}
			else
			{
#>
/* kldd dummy '<#=kldd_name#>' of partiton '<#=part_name#>' */
#define OS_KLDD_<#=part_name#>_<#=kldd_name#>_FUNC 0x00000000
#define OS_KLDD_<#=part_name#>_<#=kldd_name#>_ARG0 0x00000000
<#
			}
		}
	}
#>

/*
	defines for counter
*/
<#
	foreach (XPathNavigator counter in config.Select("/system/counter"))
	{
		string counter_name = counter.GetAttribute("name", "");
		List<XPathNavigator> reloc_list = config.Select("/reloc/counter[@name=\""+counter_name+"\"]");
		if(reloc_list.Count!=0){
			XPathNavigator reloc_counter = reloc_list[0];
#>
/* counter '<#=counter_name#>' */
#define OS_COUNTER_<#=counter_name#>_REGISTER <#=reloc_counter.SelectSingleNode("register").Value#>
#define OS_COUNTER_<#=counter_name#>_QUERY <#=reloc_counter.SelectSingleNode("query").Value#>
#define OS_COUNTER_<#=counter_name#>_CHANGE <#=reloc_counter.SelectSingleNode("change").Value#>
<#
		}
		else
		{
#>
/* counter dummy '<#=counter_name#>' */
#define OS_COUNTER_<#=counter_name#>_REGISTER 0x00000000
#define OS_COUNTER_<#=counter_name#>_QUERY 0x00000000
#define OS_COUNTER_<#=counter_name#>_CHANGE 0x00000000
<#
		}
	}
#>


#endif
