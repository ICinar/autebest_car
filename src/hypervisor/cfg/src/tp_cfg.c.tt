<#@ template language="C#" hostSpecific="true" debug="true" inherits="ECCG.Data.Base" #>
<#@ ECCG Processor="ECCGDirectiveProcessor" #>
/* tp_cfg.c -- AUTOGENERATED -- DO NOT EDIT -- */


#include <tp_state.h>
#include <hv_compiler.h>

<#
	List<XPathNavigator> schedules = config.Select("/system/schedule");
	List<XPathNavigator> all_windows = config.Select("/system/schedule/window");

	int num_schedules = (schedules != null) ? schedules.Count : 0;
	int num_windows = (all_windows != null) ? all_windows.Count : 0;
	bool use_default_schedule = false;
	if (num_schedules == 0) {
		num_schedules = 1;
		num_windows = 1;
		use_default_schedule = true;
	}
#>
const struct tpwindow_cfg tpwindow_cfg[<#= num_windows #>] = {
<#
	int system_period = Convert.ToInt32(config.Select("/system")[0].GetAttribute("period", ""));
	if (use_default_schedule) {
#>
	/* default window */ {
		.timepart = 0,
		.duration = <#= system_period #>,
		.flags = TPWINDOW_FLAG_FIRST | TPWINDOW_FLAG_LAST,
	},
<#
	} else {
		int id = 0;
		foreach (XPathNavigator schedule in schedules) {
			var windows = schedule.Select("window");
			string name = schedule.GetAttribute("name", "");
			int num_wins_in_schedule = (windows != null) ? windows.Count : 0;
			int start_time = 0;
			int this_window = 0;

			foreach (XPathNavigator window in windows) {
				int offset = Convert.ToInt32(window.GetAttribute("offset", ""));
				int duration = Convert.ToInt32(window.GetAttribute("duration", ""));
				int timepart = Convert.ToInt32(window.GetAttribute("timepart", ""));
				int release = 0;
				if (window.GetAttribute("release", "") != "") {
					release = Convert.ToInt32(window.GetAttribute("release", ""));
				}

				if (offset != start_time) {
					// FIXME: throw error ...
					#> #error broken configuration <#
				}
				start_time += duration;

				string flags = "0";
				if (this_window == 0) {
					flags += " | TPWINDOW_FLAG_FIRST";
				}
				if (this_window == num_wins_in_schedule-1) {
					flags += " | TPWINDOW_FLAG_LAST";
				}
				if (release != 0) {
					flags += " | TPWINDOW_FLAG_RELEASE";
				}
#>
	/* window <#= id #>: schedule '<#= name #>' offset <#= offset #> */ {
		.timepart = <#= timepart #>,
		.duration = <#= duration #>,
		.flags = <#= flags #>,
	},
<#
				this_window++;
				id++;
			}
			if (start_time != system_period) {
				// FIXME: throw error ...
				#> #error broken configuration <#
			}
		}
	}
#>
};

const uint8_t num_tpschedules __section_cfg = <#= num_schedules #>;
const struct tpschedule_cfg tpschedule_cfg[<#= num_schedules #>] = {
<#
	if (use_default_schedule) {
#>
	/* default schedule */ {
	.start = &tpwindow_cfg[0],
	},
<#
	} else {
		int win_id = 0;
		foreach (XPathNavigator schedule in schedules) {
			var windows = schedule.Select("window");
			string name = schedule.GetAttribute("name", "");
			int num_wins_in_schedule = (windows != null) ? windows.Count : 0;
#>
	/* schedule '<#= name #>' */ {
	.start = &tpwindow_cfg[<#= win_id #>],
	},
<#
			win_id += num_wins_in_schedule;
		}
	}
#>
};
