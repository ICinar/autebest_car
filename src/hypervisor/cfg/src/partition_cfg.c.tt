<#@ template language="C#" hostSpecific="true" debug="true" inherits="ECCG.Data.Base" #>
<#@ ECCG Processor="ECCGDirectiveProcessor" #>
/* partition_cfg.c -- AUTOGENERATED -- DO NOT EDIT -- */


#include <kernel.h>
#include <assert.h>
#include <sched_state.h>
#include <part_state.h>
#include <task_state.h>
#include <kldd_state.h>
#include <ipev_state.h>
#include <rpc_state.h>
#include <counter_state.h>
#include <alarm_state.h>
#include <schedtab_state.h>
#include <wq_state.h>
#include <isr_state.h>
#include <shm_state.h>
#include <address_defines.h>
#include <task_defines.h>
#include <arch_mpu_state.h>
#include <sched.h>

<#
	int num_cpus = Convert.ToInt32(config.Select("/target")[0].GetAttribute("cpus", ""));
	int num_parts = config.Select("/system/partition").Count;
#>

/* forward declaration */
<#
	for (int cpu = 0; cpu < num_cpus; cpu++) {
#>
extern struct task task_dyn_idle_<#= cpu #>[];
<#
	}
	foreach (XPathNavigator nav in config.Select("/system/partition")) {
		string part_name = nav.GetAttribute("name", "");
#>
extern struct task task_dyn_part_<#= part_name #>[];
extern struct alarm alarm_dyn_part_<#= part_name #>[];
extern struct schedtab schedtab_dyn_part_<#= part_name #>[];
extern struct wq wq_dyn_part_<#= part_name #>[];
<#
	}
#>
extern const struct wq_cfg wq_cfg[];
extern const struct counter_access counter_access[];
extern const struct shm_access shm_access[];
extern const struct kldd_cfg kldd_cfg[];
extern const struct ipev_cfg ipev_cfg[];
extern const struct rpc_cfg rpc_cfg[];
extern const struct arch_mpu_part_cfg mpu_part_cfg[];

<#
	int kldd_id = 0;
	int alarm_id = 0;
	int sched_id = 0;
	int wq_id = 0;
	int ipev_id = 0;
	int rpc_id = 0;
	int part_cnt;
	int counteraccess_id = 0;
	int shmaccess_id = 0;
#>

/* idle partitions scheduling state (per CPU core) */
<#
	for (int cpu = 0; cpu < num_cpus; cpu++) {
#>
user_sched_state_t idle_user_sched_state_core_<#= cpu #>  __section_bss_core(<#= cpu #>);
<#
	}
#>


/* dynamic partition data */
<#
	for (int cpu = 0; cpu < num_cpus; cpu++) {
#>
struct part part_dyn_idle_<#= cpu #>  __section_bss_core(<#= cpu #>);
<#
	}

	foreach (XPathNavigator nav in config.Select("/system/partition")) {
		string part_name = nav.GetAttribute("name", "");
		int cpu = 0;
		if (nav.GetAttribute("cpu", "") != "") {
			cpu = Convert.ToInt32(nav.GetAttribute("cpu", ""));
		}
#>
struct part part_dyn_part_<#= part_name #>  __section_bss_core(<#= cpu #>);
<#
	}
#>

/* partition configuration */
const uint8_t num_partitions __section_cfg = <#= num_cpus + num_parts #>;
const struct part_cfg part_cfg[<#= num_cpus + num_parts #>] = {
<#
	/* generate implicit idle partitions (one for each core) */
	for (int cpu = 0; cpu < num_cpus; cpu++) {
		int timepart = 0;

#>
	/* idle partition on CPU <#= cpu #> */ {
		.part = &part_dyn_idle_<#= cpu #>,
		.cpu_id = <#= cpu #>,
		.tp_id = <#= timepart #>,

		.user_sched_state = &idle_user_sched_state_core_<#= cpu #>,

		.name = "", /* empty name */

		.tasks = task_dyn_idle_<#= cpu #>,
		.init_hook_id = 0,
		.error_hook_id = 0xffff, /* not used */
		.exception_hook_id = 0xffff, /* not used */
		.num_error_states = 0, /* not used */
		.num_tasks = 1,

		.mpu_part_cfg = &mpu_part_cfg[<#= cpu #>],

		.part_id = <#= cpu #>,
		.flags = 0,
		.initial_operating_mode = PART_OPERATING_MODE_NORMAL,
		.sda1_base = 0, /* kernel sets SDA internally */
		.sda2_base = 0, /* kernel sets SDA internally */
	},
<#
	}

	part_cnt = num_cpus;	/* skip idle partitions (one per CPU) */
	foreach (XPathNavigator nav in config.Select("/system/partition"))
	{
		string part_name = nav.GetAttribute("name", "");
		string period = config.Select("/system")[0].GetAttribute("period", "");
		if (nav.GetAttribute("period", "") != "")
		{
			period = nav.GetAttribute("period", "");
		}
		string duration = period;
		if (nav.GetAttribute("duration", "") != "")
		{
			duration = nav.GetAttribute("duration", "");
		}

		int cpu = 0;
		if (nav.GetAttribute("cpu", "") != "") {
			cpu = Convert.ToInt32(nav.GetAttribute("cpu", ""));
		}

		int timepart = 0;
		if (nav.GetAttribute("timepart", "") != "") {
			timepart = Convert.ToInt32(nav.GetAttribute("timepart", ""));
		}

		string operating_mode = "PART_OPERATING_MODE_COLD_START";
		if (nav.GetAttribute("mode", "") != "")
		{
			if (nav.GetAttribute("mode", "").Equals("IDLE",System.StringComparison.OrdinalIgnoreCase))
			{
				operating_mode = "PART_OPERATING_MODE_IDLE";
			}
		}
		string init_hook_name = nav.GetAttribute("init_hook", "");
		string init_hook_str;
		init_hook_str = "OS_TASK_LOCAL_ID_" + part_name + "_" + init_hook_name;
		string error_hook_name = nav.GetAttribute("error_hook", "");
		string error_hook_str = "0xffff /* not used */";
		int num_error_states = 0;
		if (error_hook_name != "") {
			error_hook_str = "OS_TASK_LOCAL_ID_" + part_name + "_" + error_hook_name;
			num_error_states = Convert.ToInt32(nav.GetAttribute("error_records", ""));
		}
		string exception_hook_name = nav.GetAttribute("exception_hook", "");
		string exception_hook_str = "0xffff /* not used */";
		if (exception_hook_name != "") {
			exception_hook_str = "OS_TASK_LOCAL_ID_" + part_name + "_" + exception_hook_name;
		}
#>
	/* partition '<#=part_name#>' on CPU <#= cpu #> */ {
		.part = &part_dyn_part_<#= part_name #>,
		.cpu_id = <#= cpu #>,
		.tp_id = <#= timepart #>,

		.mem_ranges = {
<#
		for (int i = 0; i < 4; i++) {
#>
			{
				.start = OS_PART_<#=part_name#>_RANGE_<#=i#>_START,
				.end   = OS_PART_<#=part_name#>_RANGE_<#=i#>_END,
			},
<#
		}
#>
		},

		.period = <#=period#>,
		.duration = <#=duration#>,

		.user_sched_state = (user_sched_state_t *)OS_PART_<#=part_name#>_USR_SCHED, /* <#= nav.GetAttribute("sched_state", "") #> */
<#
		if (nav.GetAttribute("error_state", "") != "") {
#>
		.user_error_state = (user_error_state_t *)OS_PART_<#=part_name#>_USR_ERROR, /* <#= nav.GetAttribute("error_state", "") #> */
<#
		}
		if (nav.GetAttribute("exception_state", "") != "") {
#>

		.user_exception_state = (user_exception_state_t *)OS_PART_<#=part_name#>_USR_EXCEPTION, /* <#= nav.GetAttribute("exception_state", "") #> */
<#
		}
#>

		.tasks = task_dyn_part_<#= part_name #>,
		.num_tasks = <#=nav.Select("./task").Count + nav.Select("./isr").Count + nav.Select("./hook").Count + nav.Select("./invokable").Count#>,

		.mpu_part_cfg = &mpu_part_cfg[<#= part_cnt #>],

		.rpcs = &rpc_cfg[<#=rpc_id#>],
<# rpc_id+=nav.Select("./rpc").Count; #>
		.num_rpcs = <#=nav.Select("./rpc").Count#>,

		.kldds = &kldd_cfg[<#=kldd_id#>],
<# kldd_id+=nav.Select("./kldd").Count; #>
		.num_kldds = <#=nav.Select("./kldd").Count#>,
		.ipevs = &ipev_cfg[<#=ipev_id#>],
<#
		ipev_id+=nav.Select("./ipev").Count;
#>
		.num_ipevs = <#=nav.Select("./ipev").Count#>,

		.ctr_accs = &counter_access[<#=counteraccess_id#>],
<# counteraccess_id+=nav.Select("./counter_access").Count; #>
		.num_ctr_accs = <#=nav.Select("./counter_access").Count#>,

		.alarms = alarm_dyn_part_<#= part_name #>,
<# alarm_id+=nav.Select("./alarm").Count; #>
		.num_alarms = <#=nav.Select("./alarm").Count#>,

		.schedtabs = schedtab_dyn_part_<#= part_name #>,
<# sched_id+=nav.Select("./sched_table").Count; #>
		.num_schedtabs = <#=nav.Select("./sched_table").Count#>,

		.wq_cfgs = &wq_cfg[<#=wq_id#>],
		.wqs = wq_dyn_part_<#= part_name #>,
<# wq_id+=nav.Select("./wait_queue").Count; #>
		.num_wqs = <#=nav.Select("./wait_queue").Count#>,

		.shm_accs = &shm_access[<#=shmaccess_id#>],
<# shmaccess_id+=nav.Select("./shm_access").Count; #>
		.num_shm_accs = <#=nav.Select("./shm_access").Count#>,

		.max_prio = <#= nav.GetAttribute("max_prio", "") #>,
		.name = "<#= nav.GetAttribute("name", "") #>",
		.part_id = <#= part_cnt #>,
<#
		string flags = nav.GetAttribute("flags", "");
		if(String.IsNullOrEmpty(flags)){
			flags = "0";
		}
#>
		.flags = <#= flags #>,
		.initial_operating_mode = <#= operating_mode #>,
		.init_hook_id = <#=init_hook_str#>,
		.error_hook_id = <#=error_hook_str#>,
		.exception_hook_id = <#=exception_hook_str#>,
		.num_error_states = <#=num_error_states#>,

		.sda1_base = OS_PART_<#=part_name#>_SDA1_BASE, /* <#= nav.GetAttribute("sda1_base", "") #> */
		.sda2_base = OS_PART_<#=part_name#>_SDA2_BASE, /* <#= nav.GetAttribute("sda2_base", "") #> */
	},
<#
		part_cnt++;
	}
#>
};
