<#@ template language="C#" hostSpecific="true" debug="true" inherits="ECCG.Data.Base" #>
<#@ ECCG Processor="ECCGDirectiveProcessor" #>
/* alarm_cfg.c -- AUTOGENERATED -- DO NOT EDIT -- */


#include <kernel.h>
#include <assert.h>
#include <alarm_state.h>
#include <task_state.h>
#include <schedtab_state.h>
#include <counter_defines.h>
#include <counter_state.h>
#include <task_defines.h>
#include <address_defines.h>

/* forward declaration */
<#
	foreach (XPathNavigator nav in config.Select("/system/partition")) {
		string part_name = nav.GetAttribute("name", "");
#>
extern struct task task_dyn_part_<#= part_name #>[];
extern struct schedtab schedtab_dyn_part_<#= part_name #>[];
<#
	}
#>
extern const struct counter_cfg counter_cfg[];

/* alarm table */
<#
	List<XPathNavigator> alarms = config.Select("/system/partition/alarm");
	List<XPathNavigator> sched_tables = config.Select("/system/partition/sched_table");
	int num_alarms = 0;
	if(alarms != null)
	{
		num_alarms+= alarms.Count;
	}
	int num_schedtabs = 0;
	if(sched_tables != null)
	{
		num_schedtabs += sched_tables.Count;
	}
#>
const struct alarm_cfg alarm_cfg[<#=num_alarms + num_schedtabs#>] = {
<#
	foreach (XPathNavigator partition in config.Select("/system/partition"))
	{
		int cpu = 0;
		if (partition.GetAttribute("cpu", "") != "") {
			cpu = Convert.ToInt32(partition.GetAttribute("cpu", ""));
		}

		int alarm_counter = 0;
		foreach (XPathNavigator alarm in partition.Select("alarm"))
		{
			String alarm_name = alarm.GetAttribute("name", "");
			String counter_name = alarm.GetAttribute("counter", "");
#>
	/* partition '<#=partition.GetAttribute("name", "")#>' index <#=alarm_counter++#> '<#=alarm_name#>' */ {
		.counter_id = OS_COUNTER_<#=counter_name#>, /* <#=counter_name#> */
		.cpu_id = <#=cpu#>,
<#
			foreach (XPathNavigator action in alarm.Select("action_hook"))
			{
#>
		.action = ALARM_ACTION_HOOK,
		.u.task = &task_dyn_part_<#=action.GetAttribute("partition","")#>[OS_TASK_LOCAL_ID_<#=action.GetAttribute("partition","")#>_<#=action.GetAttribute("hook", "")#>], /*  */
<#
			}

			foreach (XPathNavigator action in alarm.Select("action_event"))
			{
#>
		.action = ALARM_ACTION_EVENT,
		.u.task = &task_dyn_part_<#=action.GetAttribute("partition","")#>[OS_TASK_LOCAL_ID_<#=action.GetAttribute("partition","")#>_<#=action.GetAttribute("task", "")#>], /*  */
		.event_bit = <#=action.GetAttribute("bit", "")#>,
<#
			}

			foreach (XPathNavigator action in alarm.Select("action_task"))
			{
#>
		.action = ALARM_ACTION_TASK,
		.u.task = &task_dyn_part_<#=action.GetAttribute("partition","")#>[OS_TASK_LOCAL_ID_<#=action.GetAttribute("partition","")#>_<#=action.GetAttribute("task", "")#>], /*  */
<#
			}

			foreach (XPathNavigator action in alarm.Select("action_counter"))
			{
#>
		.action = ALARM_ACTION_COUNTER,
		.u.counter_cfg = &counter_cfg[OS_COUNTER_<#=action.GetAttribute("counter", "")#>],
<#
			}

			foreach (XPathNavigator action in alarm.Select("action_invoke"))
			{
#>
		.action = ALARM_ACTION_INVOKE,
		.u.alarm_callback = (void*)OS_KLDD_<#=partition.GetAttribute("name","")#>_<#=action.GetAttribute("entry","")#>_FUNC
<#
			}
#>
	},
<#
		}

	}

	foreach (XPathNavigator partition in config.Select("/system/partition")) {
		String part_name = partition.GetAttribute("name", "");
		int local_sched_table_id = 0;
		int cpu = 0;
		if (partition.GetAttribute("cpu", "") != "") {
			cpu = Convert.ToInt32(partition.GetAttribute("cpu", ""));
		}

		foreach (XPathNavigator sched_table in partition.Select("sched_table"))
		{
#>
	/* partition '<#=partition.GetAttribute("name", "")#>' sched_table '<#=sched_table.GetAttribute("name", "")#>' */ {
		.counter_id = OS_COUNTER_<#=sched_table.GetAttribute("counter", "")#>, /* <#=sched_table.GetAttribute("counter", "")#> */
		.cpu_id = <#=cpu#>,
		.action = ALARM_ACTION_SCHEDTAB,
		.u.schedtab = &schedtab_dyn_part_<#= part_name #>[<#=local_sched_table_id++#>],
	},
<#
		}

	}
#>
};

<#
	foreach (XPathNavigator part in config.Select("/system/partition")) {
		String part_name = part.GetAttribute("name", "");
		int cpu = 0;
		if (part.GetAttribute("cpu", "") != "") {
			cpu = Convert.ToInt32(part.GetAttribute("cpu", ""));
		}
		int part_alarms = part.Select("./alarm").Count;
		
		{
#>
#ifdef CODEWARRIOR
struct alarm alarm_dyn_part_<#= part_name #>[<#= Math.Max(part_alarms, 1) #>] __section_bss_core(<#= cpu #>);
#else
struct alarm alarm_dyn_part_<#= part_name #>[<#= part_alarms #>] __section_bss_core(<#= cpu #>);
#endif
<#
		}
	}

	int sched_table_id = 0;
	foreach (XPathNavigator partition in config.Select("/system/partition")) {
		int cpu = 0;
		if (partition.GetAttribute("cpu", "") != "") {
			cpu = Convert.ToInt32(partition.GetAttribute("cpu", ""));
		}
		foreach (XPathNavigator sched_table in partition.Select("sched_table")) {
#>
struct alarm alarm_dyn_schedtab_<#=sched_table_id#> __section_bss_core(<#= cpu #>);
<#
			sched_table_id++;
		}
	}
#>
