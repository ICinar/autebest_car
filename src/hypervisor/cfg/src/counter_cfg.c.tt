<#@ template language="C#" hostSpecific="true" debug="true" inherits="ECCG.Data.Base" #>
<#@ ECCG Processor="ECCGDirectiveProcessor" #>
/* counter_cfg.c -- AUTOGENERATED -- DO NOT EDIT -- */


#include <kernel.h>
#include <assert.h>
#include <counter_state.h>
#include <counter_defines.h>
#include <address_defines.h>

/* global counter table */
<#
	int counter_number=config.Select("/system/counter").Count;
#>
const uint8_t num_counters __section_cfg = <#=counter_number#>;
<#
	foreach (XPathNavigator counter in config.Select("/system/counter")) {
		string counter_name = counter.GetAttribute("name", "");
		int cpu = 0;
		if (counter.GetAttribute("cpu", "") != "") {
			cpu = Convert.ToInt32(counter.GetAttribute("cpu", ""));
		}
#>
struct counter counter_dyn_<#=counter_name#> __section_bss_core(<#= cpu #>);
<#
	}
#>
const struct counter_cfg counter_cfg[<#=counter_number#>] = {
<#
	int counter_id = 0;
	foreach (XPathNavigator counter in config.Select("/system/counter"))
	{
		string counter_name = counter.GetAttribute("name", "");
		int cpu = 0;
		if (counter.GetAttribute("cpu", "") != "") {
			cpu = Convert.ToInt32(counter.GetAttribute("cpu", ""));
		}
#>
	/* counter <#=counter_id#> '<#=counter_name#>' */ {
		.counter = &counter_dyn_<#= counter_name #>,
		.reg = (void*)OS_COUNTER_<#=counter_name#>_REGISTER,
		.query = (void*)OS_COUNTER_<#=counter_name#>_QUERY,
		.change = (void*)OS_COUNTER_<#=counter_name#>_CHANGE,
		.maxallowedvalue = <#=counter.GetAttribute("maxallowedvalue", "")#>,
		.ticksperbase = <#=counter.GetAttribute("ticksperbase", "")#>,
		.mincycle = <#=counter.GetAttribute("mincycle", "")#>,
		.type = <#= counter.GetAttribute("type", "").Equals("sw",System.StringComparison.OrdinalIgnoreCase) ? "COUNTER_TYPE_SW" : "COUNTER_TYPE_HW" #>,
		.cpu_id = <#=cpu#>,
	},
<#
		counter_id++;
	}
#>
};

/* partition counter access table */
const struct counter_access counter_access[<#=config.Select("/system/partition/counter_access").Count#>] = {
<#
	foreach (XPathNavigator partition in config.Select("/system/partition"))
	{
		int counter_access_id = 0;
		foreach (XPathNavigator counter_access in partition.Select("counter_access"))
		{
			String counter_name = counter_access.GetAttribute("counter", "");
#>
	/* partition '<#=partition.GetAttribute("name", "")#>' index <#=counter_access_id#> '<#=counter_name#>' */ {
		.counter_cfg = &counter_cfg[OS_COUNTER_<#=counter_name#>],
	},
<#
			counter_access_id++;
		}
		
	}
#>
};
