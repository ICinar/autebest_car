# Makefile
#
# Top level Makefile
#
# azuepke, 2013-04-06: split from Kernel/Makefile
# azuepke, 2013-11-25: initial MPU version
# azuepke, 2014-04-25: pass $ARCH_$SUBARCH to configgen.pl and relocate.sh
# azuepke, 2014-08-19: use new configuration tools

include ./rules.mk
include ./rules-$(FOOBAR_RULESET).mk

# workaround for nm on ARM beaufitying addresses of thumb functions
ifeq ("$(ARCH)", "arm")
NM = nm
endif

include bsp/$(BSP)/bsp_defs.mk

ifeq ("$(PROJECT)", "")
PROJECT := ../demos/demo1
endif
include $(PROJECT)/project.mk

# Additional rules to build the configuration
include kernel/arch/$(ARCH)/$(SUBARCH)-$(FOOBAR_RULESET).mk
CFLAGS += $(call cc-option,-fno-delete-null-pointer-checks,) \
          $(call cc-option,-fconserve-stack,) \
          -fno-strict-aliasing \
          -fno-common \
          -D__KERNEL

APPFILES := $(foreach app,$(APPS),$(APPDIR)/$(app)/app.ro)

CONFIGFILES := $(BSP_CONFIG) $(APP_CONFIG)

LIBS := libsys libcmini libos libapex libvmcal/libvcan libvmcal/libvcanif
ifeq ("$(NOLIBGCC)", "")
LIBS += libgcc
endif

LIBFILES := $(foreach lib,$(LIBS),$(lib)/$(notdir $(lib)).a)

MKELF = $(FOOBAR_MKELF)

ifeq ("$(ELF_ENTRY)", "")
ELF_ENTRY := $(ELF_LOADADDR)
endif

.PHONY: all dummy_reloc final_reloc clean distclean kernel dummy_kernel final_kernel apps libs .FORCE

all: $(OUTDIR)/bootfile.elf

# BSP specific targets such as "run" or "debug"
.PHONY: run debug autorun

run debug: all
	$(MAKE) -C bsp/$(BSP) BINDIR=$(OUTDIR) $@

autorun:
	$(MAKE) -C bsp/$(BSP) BINDIR=$(OUTDIR) $@

# kernel
kernel: .FORCE
	$(MAKE) -C kernel all

$(OUTDIR):
	@echo "  MKDIR $@"
	$(Q)mkdir -p $@

$(OUTDIR)/.dummy_config.o: $(OUTDIR)/dummy_config.c .FORCE
	$(CC) $(CFLAGS) $(ARCH_CFLAGS) -Ikernel/include -Ikernel/arch/$(ARCH)/include -o $@ $<

$(OUTDIR)/config.xml: $(CONFIGFILES) | $(OUTDIR)
	@echo "  GEN0  $@"
	$(Q) echo "<!-- GENERATED BY MAKEFILE - DO NOT EDIT - $(BUILDID) -->" >$@
	$(Q) echo "<all>" >>$@
	$(Q) cat $^ >>$@
	$(Q) echo "</all>" >>$@
	$(Q)$(HOSTPERL) scripts/ab_gen_iddefines.pl -p $(APPDIR) $@

$(OUTDIR)/dummy_config.c: $(OUTDIR)/config.xml .FORCE
	@echo "  GEN1  $@"
	$(Q)$(HOSTPERL) scripts/ab_gen_config_c.pl -p $(APPDIR) -s $(NM) -o $(OUTDIR)/dummy_1.c $<
	$(Q)$(HOSTPERL) scripts/ab_gen_mpu_c.pl -o $(OUTDIR)/dummy_2.c $<
	$(Q)cat $(OUTDIR)/dummy_1.c $(OUTDIR)/dummy_2.c > $@
	$(Q)rm -f $(OUTDIR)/dummy_1.c $(OUTDIR)/dummy_2.c

$(OUTDIR)/.final_config.o: $(OUTDIR)/final_config.c
	$(CC) $(CFLAGS) $(ARCH_CFLAGS) -Ikernel/include -Ikernel/arch/$(ARCH)/include -o $@ $<

$(OUTDIR)/final_config.c: $(OUTDIR)/config.xml final_reloc apps .FORCE
	@echo "  GEN2  $@"
	$(Q)$(HOSTPERL) scripts/ab_gen_config_c.pl -p $(APPDIR) -s $(NM) -r -o $(OUTDIR)/final_1.c $<
	$(Q)$(HOSTPERL) scripts/ab_gen_mpu_c.pl -m  $(OUTDIR)/final_memory.xml -o $(OUTDIR)/final_2.c $<
	$(Q)cat $(OUTDIR)/final_1.c $(OUTDIR)/final_2.c > $@
	$(Q)rm -f $(OUTDIR)/final_1.c $(OUTDIR)/final_2.c

# bsp
dummy_kernel: kernel $(OUTDIR)/.dummy_config.o
	$(MAKE) -C bsp/$(BSP) CONFIG=../../$(OUTDIR)/.dummy_config.o dummy_reloc

final_kernel: kernel $(OUTDIR)/.final_config.o
	$(MAKE) -C bsp/$(BSP) CONFIG=../../$(OUTDIR)/.final_config.o final_reloc

$(OUTDIR)/bootfile.bin: $(OUTDIR)/config.xml final_kernel apps .FORCE
	@echo "  GEN3  $@"
	$(Q)$(HOSTPERL) scripts/ab_gen_romimage.pl -m $(OUTDIR)/final_memory.xml -p $(APPDIR) $(OUTDIR)/config.xml -o $@

$(OUTDIR)/bootfile.elf: $(OUTDIR)/bootfile.bin
	@echo "  MKELF $@"
	$(Q) $(MKELF) $(OUTDIR)/bootfile.bin $(ELF_ARCH) $(ELF_LOADADDR) $@ $(ELF_ENTRY)


# Libs
libs: $(LIBFILES)

$(LIBFILES): .FORCE
	$(MAKE) -C $(dir $@) all

# Applications
apps: $(APPFILES)

$(APPFILES): libs $(OUTDIR)/.dummy_config.o
	$(MAKE) -C $(dir $@) all
# could use objcopy to avoid symbol clashes here, e.g. one of these two:
# - make symbols unique by prefixing the application name
#	$(OBJCOPY) --prefix-symbols $(subst /,_,$(dir $@)) $@
# - change all symbols to be local:
#	$(OBJCOPY) -w -L'*' $@


# first (dummy) relocation to get ROM and RAM sizes
dummy_reloc: apps dummy_kernel $(OUTDIR)/config.xml
	for i in $(APPS) ; do $(MAKE) -C $(APPDIR)/$$i dummy_reloc ; done

# Create initial memory.xml
$(OUTDIR)/memory.xml: dummy_reloc $(OUTDIR)/config.xml
	$(Q)$(HOSTPERL) scripts/ab_gen_memory_xml.pl -s $(NM) -p $(APPDIR) -o $(OUTDIR)/memory.xml $(OUTDIR)/config.xml

# Create initial hardware.xml
$(OUTDIR)/hardware.xml: $(OUTDIR)/config.xml
	$(Q)$(HOSTPERL) scripts/ab_gen_hardware_xml.pl -o $(OUTDIR)/hardware.xml $(OUTDIR)/config.xml

# Calculate final addresses in ROM and RAM
$(OUTDIR)/final_memory.xml: $(OUTDIR)/hardware.xml $(OUTDIR)/memory.xml
	$(Q)$(MPU_CFG) --hw $(OUTDIR)/hardware.xml $(OUTDIR)/memory.xml -o $@ -c

# second (final) relocation to the right place in ROM and RAM, but still with dummy kernel
final_reloc: apps dummy_kernel $(OUTDIR)/final_memory.xml $(OUTDIR)/config.xml
	$(Q)$(HOSTPERL) scripts/ab_gen_lddefines.pl -m $(OUTDIR)/final_memory.xml -p $(APPDIR) $(OUTDIR)/config.xml
	for i in $(APPS) ; do $(MAKE) -C $(APPDIR)/$$i final_reloc ; done


# cleanup

thisclean:
	$(Q)rm -f $(OUTDIR)/bootfile.bin $(OUTDIR)/bootfile.elf $(OUTDIR)/config.xml $(OUTDIR)/final_config.xml
	$(Q)rm -f $(OUTDIR)/hardware.xml $(OUTDIR)/memory.xml $(OUTDIR)/final_memory.xml
	$(Q)rm -f $(OUTDIR)/.dummy_config.o $(OUTDIR)/dummy_config.c $(OUTDIR)/.final_config.o $(OUTDIR)/final_config.c

clean: thisclean
	$(MAKE) -C cfg CONFIGFILES="$(CONFIGFILES)" OUTDIR="$(CONFIGOUTDIR)" clean
	$(MAKE) -C kernel clean
	$(MAKE) -C bsp/$(BSP) clean
	for i in $(LIBS) ; do $(MAKE) -C $$i clean ; done
	for i in $(APPS) ; do $(MAKE) -C $(APPDIR)/$$i clean ; done

distclean: thisclean
	$(MAKE) -C cfg CONFIGFILES="$(CONFIGFILES)" OUTDIR="$(CONFIGOUTDIR)" distclean
	$(MAKE) -C kernel distclean
	$(MAKE) -C bsp/$(BSP) distclean
	for i in $(LIBS) ; do $(MAKE) -C $$i distclean ; done
	for i in $(APPS) ; do $(MAKE) -C $(APPDIR)/$$i distclean ; done

zap: distclean

tools:
	$(MAKE) -C mpu

toolsclean:
	$(Q)rm -f mpu/ab_gen_mpu_cfg.exe
	$(Q)rm -f cfg/.*.tt.dll cfg/.*.tt.dll.mdb cfg/.*.tt.pdb
	$(Q)rm -f cfg/src/.*.tt.dll cfg/src/.*.tt.dll.mdb cfg/src/.*.tt.pdb
	$(Q)rm -f cfg/include/.*.tt.dll cfg/include/.*.tt.dll.mdb cfg/include/.*.tt.pdb
	$(Q)rm -f libos/templates/.*.tt.dll libos/templates/.*.tt.dll.mdb libos/templates/.*.tt.dll.pdb
	$(Q)rm -f libposix/templates/.*.tt.dll libposix/templates/.*.tt.dll.mdb libposix/templates/.*.tt.dll.pdb
