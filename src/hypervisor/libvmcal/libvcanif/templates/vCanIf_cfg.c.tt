<#@ template language="C#" hostSpecific="true" debug="true" inherits="ECCG.Data.Base" #>
<#@ ECCG Processor="ECCGDirectiveProcessor" #>
/* vCanIf_cfg.c -- AUTOGENERATED -- DO NOT EDIT -- */
/*
 * Copyright 2015 easycore GmbH, 91058 Erlangen, Germany.
 * All rights exclusively reserved for easycore GmbH, unless expressly agreed
 * to otherwise.
 */

/*==================[inclusions]==============================================*/

#include "vCanIf_cfg.h"
#include "app.id.h"

#if (defined FINAL_RELOC)
  #include "app.ld.h"
#endif

/*==================[macros]==================================================*/
/*==================[type definitions]========================================*/
/*==================[external function declarations]==========================*/
/*==================[internal function declarations]==========================*/
/*==================[external constants]======================================*/
/*==================[internal constants]======================================*/
<#
    string part_name = config.LookupValues("OSEKPartition");

    List<XPathNavigator> vCanIf_Transmit_Entries =
    config.Select("/system/partition[@name=\""+part_name+"\"]/vCanIf/CanIf_Transmit");

    List<XPathNavigator> vCanIf_RxIndication_Entries =
    config.Select("/system/partition[@name=\""+part_name+"\"]/vCanIf/CanIf_RxIndication");

    List<XPathNavigator> vCanIf_TxConfirmation_Entries =
    config.Select("/system/partition[@name=\""+part_name+"\"]/vCanIf/CanIf_TxConfirmation");
    
    int CanTxPduId_max = 0;
    foreach (XPathNavigator CanIf_Transmit in vCanIf_Transmit_Entries)
    {
        string CanTxPduId = CanIf_Transmit.GetAttribute("CanTxPduId", "");
        try
        {
            int CanTxPduId_val = Int32.Parse(CanTxPduId);
            if (CanTxPduId_val > CanTxPduId_max)
            {
                CanTxPduId_max = CanTxPduId_val;
            }
        }
        catch (FormatException e)
        {
        }
    }
    
    int CanTxConfirmPduId_max = 0;
    foreach (XPathNavigator CanIf_TxConfirmation in vCanIf_TxConfirmation_Entries)
    {
        string CanTxPduId = CanIf_TxConfirmation.GetAttribute("CanTxPduId", "");
        try
        {
            int CanTxPduId_val = Int32.Parse(CanTxPduId);
            if (CanTxPduId_val > CanTxConfirmPduId_max)
            {
                CanTxConfirmPduId_max = CanTxPduId_val;
            }
        }
        catch (FormatException e)
        {
        }
    }
#>
/*==================[external data]===========================================*/

/*------------------[Clients of CanIf_Transmit]-------------------------------*/

<#
if (vCanIf_Transmit_Entries.Count > 0)
{
#>
static CanIf_Transmit_Config vCanIf_Transmit_Entries[vCANIF_TRANSMIT_ENTRIES] =
{
#if (defined FINAL_RELOC)
<#
    for (int i = 0; i <= CanTxPduId_max; i++)
    {
        List<XPathNavigator> TransmitClient =
        config.Select("/system/partition[@name=\""+part_name+"\"]/vCanIf/CanIf_Transmit[@CanTxPduId=\""+ i + "\"]");

        if (TransmitClient.Count > 0)
        {
            string shm = TransmitClient[0].GetAttribute("shm", "");
#>
    /* CanTxPduId = <#= i #> user configured */
    { .pdu  = (Can_Serialized_PduType*) SHM_START_<#= shm #> },
<#
        }
        else
        {
#>
    /* CanTxPduId = <#= i #> not configured */
    { .pdu  = (Can_Serialized_PduType*) 0x00 },
<#
        }
    }
#>
#else
    { .pdu = 0 }
#endif
};
<#
}
else
{
#>
/* No clients of CanIf_Transmit, so dummy entry for the compiler */
static CanIf_Transmit_Config vCanIf_Transmit_Entries[1] = {{ .pdu = 0 }};
<#
}
#>

/*------------------[Clients of CanIf_RxIndication]---------------------------*/

<#
if (vCanIf_RxIndication_Entries.Count > 0)
{
#>
static CanIf_RxIndication_Config vCanIf_RxIndication_Entries[vCANIF_RXINDICATION_ENTRIES]=
{
#if (defined FINAL_RELOC)
<#
    foreach (XPathNavigator CanIf_RxIndication in vCanIf_RxIndication_Entries)
    {
        string ipev = CanIf_RxIndication.GetAttribute("ipev", "");
        string shm  = CanIf_RxIndication.GetAttribute("shm", "");
#>
    {
      .ipev = CFG_IPEV_<#= ipev #>,
      .pdu  = (Can_Serialized_PduType*) SHM_START_<#= shm #>
    },
<#
    }
#>
#else
    {
      .ipev = 0,
      .pdu  = 0
    }
#endif
};
<#
}
else
{
#>
/* No clients configured for RxIndication, so dummy entry */
static CanIf_RxIndication_Config vCanIf_RxIndication_Entries[1]=
{
    {
      .ipev = 0,
      .pdu  = 0
    }
};
<#
}
#>

/*------------------[Clients of CanIf_TxConfirmation]-------------------------*/

<#
if (vCanIf_TxConfirmation_Entries.Count > 0)
{
#>
static CanIf_TxConfirmation_Config vCanIf_TxConfirmation_Entries[vCANIF_TXCONFIRMATION_ENTRIES] =
{
#if (defined FINAL_RELOC)
<#
for (int i = 0; i <= CanTxConfirmPduId_max; i++)
{
#>
    /* PDU ID <#= i #> */
<#
    List<XPathNavigator> CanIf_TxConfirmation =
        config.Select("/system/partition[@name=\""+part_name+"\"]/vCanIf/CanIf_TxConfirmation[@CanTxPduId=\""+ i + "\"]");
    if (CanIf_TxConfirmation.Count > 0)
    {
        string ipev = CanIf_TxConfirmation[0].GetAttribute("ipev", "");
        string shm  = CanIf_TxConfirmation[0].GetAttribute("shm", "");
#>
    {
      .ipev  = CFG_IPEV_<#= ipev #>,
      .pduid = (PduIdType*) SHM_START_<#= shm #>
    },
<#
    }
    else
    {
#>
    {
      .ipev  = 0,
      .pduid = (PduIdType*) 0
    },
<#
    }
}
#>
#else
    {
      .ipev   = 0,
      .pduid  = 0
    }
#endif
};
<#
}
else
{
#>
/* No clients configured for TxConfirmation, so dummy entry */
static CanIf_TxConfirmation_Config vCanIf_TxConfirmation_Entries[1] =
{
    {
      .ipev   = 0,
      .pduid  = 0
    }
};
<#
}
#>

/*------------------[vCanIf Configuration]------------------------------------*/

const CanIf_ConfigType vCanIf_Configuration =
{
    .vCanIf_Transmit_Entries_Count       = vCANIF_TRANSMIT_ENTRIES,
    .vCanIf_Transmit_Entries             = vCanIf_Transmit_Entries,

    .vCanIf_RxIndication_Entries_Count   = vCANIF_RXINDICATION_ENTRIES,
    .vCanIf_RxIndication_Entries         = vCanIf_RxIndication_Entries,

    .vCanIf_TxConfirmation_Entries_Count = vCANIF_TXCONFIRMATION_ENTRIES,
    .vCanIf_TxConfirmation_Entries       = vCanIf_TxConfirmation_Entries
};

/*==================[internal data]===========================================*/
/*==================[external function definitions]===========================*/
/*==================[internal function definitions]===========================*/
/*==================[end of file]=============================================*/
