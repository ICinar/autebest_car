# Makefile
#
# bsp Makefile
#
# azuepke, 2013-11-17: split from kernel Makefile

TOP := ../..

include $(TOP)/rules.mk
include $(TOP)/rules-$(FOOBAR_RULESET).mk
include $(TOP)/kernel/arch/$(ARCH)/$(SUBARCH)-$(FOOBAR_RULESET).mk

vpath %.c src ../arch/$(ARCH)/src
vpath %.S src ../arch/$(ARCH)/src

INCLUDES = -nostdinc \
           -Iinclude \
           -I$(TOP)/kernel/include \
           -I$(TOP)/kernel/arch/$(ARCH)/include \
           -I../arch/$(ARCH)/include
CFLAGS += -W -Wall -Wshadow -Wpointer-arith -Wcast-qual \
          -Wmissing-prototypes -Wstrict-prototypes \
          -fno-strict-aliasing \
          -fno-common \
          -Werror \
          -D__KERNEL \
          $(INCLUDES) \
          $(ARCH_CFLAGS)
AFLAGS += $(INCLUDES) \
          $(ARCH_AFLAGS)

MODS = start board ti_uart dmtimer intc

LDFLAGS := $(ARCH_LDFLAGS)
LDSCRIPT = kernel.ld
LIBS = -L$(TOP)/libgcc -lgcc
KERNEL = $(TOP)/kernel/kernel.o

# dummy configuration that doesn't exist. when linking, we expect to be called
# from the top-level Makefile with CONFIG already set.
CONFIG = configuration

ifeq ("$(DEBUG)", "no")
CFLAGS += -g -DNDEBUG $(ARCH_CFLAGS_NDEBUG)
AFLAGS += -DNDEBUG
else
CFLAGS += -g $(ARCH_CFLAGS_DEBUG) -DVERBOSE
AFLAGS +=
endif

ifneq ("$(SMP)", "no")
CFLAGS += -DSMP
AFLAGS += -DSMP
MODS +=
else
CFLAGS +=
AFLAGS +=
endif

OBJS = $(addprefix .,$(addsuffix .o,$(MODS))) .buildid.o
DEPS = $(addprefix .,$(addsuffix .d,$(MODS)))

.PHONY: all dummy_reloc final_reloc clean distclean .FORCE

all: dummy_reloc
dummy_reloc: kernel.dummy.elf
final_reloc: kernel.elf kernel.map kernel.bin

kernel.dummy.elf: $(KERNEL) $(CONFIG) $(OBJS) $(LDSCRIPT)
	@echo "  LD    $@"
	$(Q)$(LD) $(LDFLAGS) -T$(LDSCRIPT) -o $@ $(OBJS) $(KERNEL) $(CONFIG) $(LIBS)

kernel.elf: $(KERNEL) $(CONFIG) $(OBJS) $(LDSCRIPT)
	@echo "  LD    $@"
	$(Q)$(LD) $(LDFLAGS) -T$(LDSCRIPT) -o $@ $(OBJS) $(KERNEL) $(CONFIG) $(LIBS)

kernel.map: kernel.elf
	@echo "  MAP   $@"
	$(Q)$(NM) -n $< > $@

kernel.bin: kernel.elf
	@echo "  BIN   $@"
	$(Q)$(OBJCOPY) -j .text -j .rodata -j .data -Obinary $< $@

# autogenerated files
buildid.c: $(filter-out .buildid.o, $(OBJS)) $(LDSCRIPT)
	@echo "  GEN   $@"
	$(Q)echo "/* buildid.c */" >$@
	$(Q)echo "/* GENERATED BY MAKEFILE -- DO NOT EDIT */" >>$@
	$(Q)echo "const char bsp_buildid[] = \"$(BUILDID)\";" >>$@


# cleanup
thisclean:
	$(Q)rm -f $(OBJS) buildid.c kernel.elf kernel.dummy.elf kernel.bin kernel.map

clean: thisclean

distclean: thisclean
	$(Q)rm -f $(DEPS)

# pull in dependencies
ifeq ("$(filter $(MAKECMDGOALS), clean distclean)", "")
-include $(DEPS)
endif
